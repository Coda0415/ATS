/Users/colindavis/opt/anaconda3/envs/ATS/bin/python /Users/colindavis/PycharmProjects/ATS/filetree.py

├──static
├──instance
└──app.py
    from main import create_app

    app = create_app()

    if __name__ == '__main__':
        app.run(debug=True)
├──templates
│   └──base.html
│       <!doctype html>
│       <html lang="en">
│         <head>
│           <!-- Required meta tags -->
│           <meta charset="utf-8">
│           <meta name="viewport" content="width=device-width, initial-scale=1">
│
│           <!-- Bootstrap CSS -->
│           <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
│
│           <title>{% block title %} {% endblock %}</title>
│         </head>
│         <body>
│           <div class="container">
│             {% block content %} {% endblock %}
│           </div>
│
│           <!-- Optional JavaScript -->
│           <!-- jQuery first, then Popper.js, then Bootstrap JS -->
│           <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
│           <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
│           <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>
│         </body>
│       </html>
│   └──login.html
            HTML file
│   └──create_user.html
            HTML file
│   └──JobRequestPage.html
            HTML FILE
├──main
│   └──models.py
│       from flask_login import UserMixin
│       from . import db
│
        class MyModelsHere


│   └──__init__.py
│       from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager

# Initialize SQLAlchemy and LoginManager
db = SQLAlchemy()
login_manager = LoginManager()


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))


# Function to create a Flask app
def create_app():
    # Create a Flask instance
    app = Flask(__name__, instance_relative_config=True, template_folder='../templates')

    # Set the secret key
    app.config['SECRET_KEY'] = 'Qazedcr,fvtgbyhn415'

    # Load configuration
    app.config.from_pyfile('config.py', silent=True)

    # Set the database URI and disable SQLALCHEMY_TRACK_MODIFICATIONS
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///../instance/frantz.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

    # Initialize the app with the SQLAlchemy database
    db.init_app(app)

    # Initialize the app with the LoginManager
    login_manager.init_app(app)

    # Create all the necessary database tables
    with app.app_context():
        db.create_all()

    # Import and register blueprints
    from .views import main as main_blueprint
    app.register_blueprint(main_blueprint)

    from .create_user_blueprint import create_user_blueprint
    app.register_blueprint(create_user_blueprint)

    from .JobRequestPage import job_request_page
    app.register_blueprint(job_request_page)

    from .JobRequestSubmission import job_request_submission
    app.register_blueprint(job_request_submission)

    from .open_positions_blueprint import open_positions_blueprint
    app.register_blueprint(open_positions_blueprint)

    from .position_detail_blueprint import position_detail_blueprint
    app.register_blueprint(position_detail_blueprint)

    # Return the created Flask app
    return app

# Import the necessary models
from main.models import (User, RegionalManagerMasterList, AccountManagerMasterList, Evansville, BowlingGreen, Elizabethtown, Bloomington, Clarksville,JobMasterList, OpenPositionsRoster)

│   └──create_user_blueprint.py
│           PYTHON file
│   └──JobRequestSubmission.py
│           Python file
│   └──JobRequestPage.py
│           PYTHON file
│   └──views.py
│           PYTHON file
│   └──open_positions_blueprint.py
│           PYTHON file
│   └──position_detail_blueprint.py
│           PYTHON file





=====================================================

We need to create a html form and flask endpoint.  Remember that we're using the flask blueprint method:

Lets call it employeetermform.  We're going to also need to create a table called termedemployeelist, but we'll get to that later.

this form will be used to move employees from the employeemasterlist to our termedemployeelist,

I will give you the questions and descriptions of them:  We want to get the name of the user by checking the user email against the manager email, in the accountmanagermasterlist table or the regionalamanagermasterlist table depending whether there role is AccountManager or RegionalManager, if account manager we want to check the accountmanager column in the table jobmasterlist, and return the jobnumber list.

question 1 will use this list: What is the job#
it is a dropdown list

Question2 will need to search the employeemasterlist for all employees with the primaryjob equal to question1. it is a dropdown list. It asks: Team Member Name?

question 3, this wont be a question, but it will display the Employee number of the team member selected in question2

question 4 I would a calendar picker, the question asks: Last Day Worked?

question 5. These are radio buttons, it asks: Type of Termination?
there are seven options, and they are
1. No call/ No show.
2. Discharged.
3. Quit - with less than 2 weeks notice.
4. Quit - with 2 week notice or longer.
5. Quit - no notice.
6. Lost account/Job Assignment ended.
7. Never started/ Never worked any hours.

 Question 6. If 3-7 are chosen, show this question next. Reason for Team Member Leaving?
if 1 or 2 is chosen, don't show that question. This is a text box.

Question 7: Additional information related to Team Members termination? this is a text box.  And if 2 is chosen from above, this field is required.  if any of the others are chosen its optional.

Question 8. Does this postion need to be refilled?
Yes or No radio buttons.

Finally, we're going to have a series of categories with a slider and a check box that says additional comments.
if additional comments is checked, show a text box that allows text input.
I'd like the slider to count from 1-10.

Category 1: Dependability
Category 2: Ability
Category 3: Attitude toward job
Category 4: Attitude toward supervisor
Category 5: Attitude toward co-workers
Category 6: Leadership
Category 7: Work without supervision

===============================================
I need to add a table to my postgresql database.

my database is called frantz, the username is coda415, and the password is Qwerty415.

The columns are:
 id                        | integer |           | not null |
 employeenumber            | integer |           |          |
 firstname                 | text    |           |          |
 lastname                  | text    |           |          |
 hiredate                  | text    |           |          |
 classificationdescription | text    |           |          |
 employeetypedescription   | text    |           |          |
 supervisordescription     | text    |           |          |
 jobnumber                 | text    |           |          |
 jobname                   | text    |           |          |
 categorydescription       | text    |           |          |
 region                    | text    |           |          |
 title                     | text    |           |          |
 jobstate                  | text    |           |          |
 companyaddress2           | text    |           |          |
 uctaxpayeridnumber        | text    |           |          |
 jobaddress                | text    |           |          |
 jobaddress2               | text    |           |          |
 jobcity                   | text    |           |          |
 jobzip                    | text    |           |          |
 employmenttype            | text
lastdayworked
reasonforleaving
additionalinformation
dependabilityslider
dependabilitycomments
abilityslider
abilitycomments
attitudetowardjobslider
attitudetowardjobcomments
attitudetowardsupervisorslider
attitudetowardsupervisorcomments
attitudetowardcoworkersslider
attitudetowardcoworkerscomments
leadershipslider
leadershipcomments
workwithoutsupervisionslider
workwithoutsupervisioncomments
totalevalscore
eligibleforhire
eligibleforhiredate


ALTER TABLE public.applicants
ADD COLUMN applicantid integer,
ADD COLUMN accountmanager text,
ADD COLUMN regionalmanager text,
ADD COLUMN eligibleforhire boolean,
ADD COLUMN applicantstatus text,
ADD COLUMN hubspotcontactid text,
ADD COLUMN contacthistory text,
ADD COLUMN lastcontact date,
ADD COLUMN lastcontacttype text,
ADD COLUMN nextcontact date,
ADD COLUMN nextcontacttype text,
ADD COLUMN dateapplied date,
ADD COLUMN backgroundcheck boolean,
ADD COLUMN idstatus text,
ADD COLUMN drugscreen boolean,
ADD COLUMN dateapplied date;
